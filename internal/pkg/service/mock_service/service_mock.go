// Code generated by MockGen. DO NOT EDIT.
// Source: ./service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/retail-ai-test/internal/pkg/model"
	response "github.com/retail-ai-test/internal/pkg/model/response"
)

// MockIRecipeService is a mock of IRecipeService interface.
type MockIRecipeService struct {
	ctrl     *gomock.Controller
	recorder *MockIRecipeServiceMockRecorder
}

// MockIRecipeServiceMockRecorder is the mock recorder for MockIRecipeService.
type MockIRecipeServiceMockRecorder struct {
	mock *MockIRecipeService
}

// NewMockIRecipeService creates a new mock instance.
func NewMockIRecipeService(ctrl *gomock.Controller) *MockIRecipeService {
	mock := &MockIRecipeService{ctrl: ctrl}
	mock.recorder = &MockIRecipeServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRecipeService) EXPECT() *MockIRecipeServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIRecipeService) Create(ctx context.Context, recipe model.Recipe) (*response.Recipe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, recipe)
	ret0, _ := ret[0].(*response.Recipe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockIRecipeServiceMockRecorder) Create(ctx, recipe interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIRecipeService)(nil).Create), ctx, recipe)
}

// DeleteByID mocks base method.
func (m *MockIRecipeService) DeleteByID(ctx context.Context, ID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByID", ctx, ID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByID indicates an expected call of DeleteByID.
func (mr *MockIRecipeServiceMockRecorder) DeleteByID(ctx, ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByID", reflect.TypeOf((*MockIRecipeService)(nil).DeleteByID), ctx, ID)
}

// FindAll mocks base method.
func (m *MockIRecipeService) FindAll(ctx context.Context) ([]*response.Recipe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", ctx)
	ret0, _ := ret[0].([]*response.Recipe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockIRecipeServiceMockRecorder) FindAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockIRecipeService)(nil).FindAll), ctx)
}

// FindByID mocks base method.
func (m *MockIRecipeService) FindByID(ctx context.Context, ID uint) ([]*response.Recipe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ctx, ID)
	ret0, _ := ret[0].([]*response.Recipe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockIRecipeServiceMockRecorder) FindByID(ctx, ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockIRecipeService)(nil).FindByID), ctx, ID)
}

// UpdateByID mocks base method.
func (m *MockIRecipeService) UpdateByID(ctx context.Context, recipe model.Recipe) (*response.Recipe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateByID", ctx, recipe)
	ret0, _ := ret[0].(*response.Recipe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateByID indicates an expected call of UpdateByID.
func (mr *MockIRecipeServiceMockRecorder) UpdateByID(ctx, recipe interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateByID", reflect.TypeOf((*MockIRecipeService)(nil).UpdateByID), ctx, recipe)
}

// MockIUserService is a mock of IUserService interface.
type MockIUserService struct {
	ctrl     *gomock.Controller
	recorder *MockIUserServiceMockRecorder
}

// MockIUserServiceMockRecorder is the mock recorder for MockIUserService.
type MockIUserServiceMockRecorder struct {
	mock *MockIUserService
}

// NewMockIUserService creates a new mock instance.
func NewMockIUserService(ctrl *gomock.Controller) *MockIUserService {
	mock := &MockIUserService{ctrl: ctrl}
	mock.recorder = &MockIUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUserService) EXPECT() *MockIUserServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIUserService) Create(ctx context.Context, user model.User) (*response.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, user)
	ret0, _ := ret[0].(*response.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockIUserServiceMockRecorder) Create(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIUserService)(nil).Create), ctx, user)
}

// DeleteByID mocks base method.
func (m *MockIUserService) DeleteByID(ctx context.Context, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByID", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByID indicates an expected call of DeleteByID.
func (mr *MockIUserServiceMockRecorder) DeleteByID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByID", reflect.TypeOf((*MockIUserService)(nil).DeleteByID), ctx, userID)
}

// FindByID mocks base method.
func (m *MockIUserService) FindByID(ctx context.Context, userID string) (*response.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ctx, userID)
	ret0, _ := ret[0].(*response.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockIUserServiceMockRecorder) FindByID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockIUserService)(nil).FindByID), ctx, userID)
}

// UpdateByID mocks base method.
func (m *MockIUserService) UpdateByID(ctx context.Context, user model.User) (*response.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateByID", ctx, user)
	ret0, _ := ret[0].(*response.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateByID indicates an expected call of UpdateByID.
func (mr *MockIUserServiceMockRecorder) UpdateByID(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateByID", reflect.TypeOf((*MockIUserService)(nil).UpdateByID), ctx, user)
}
