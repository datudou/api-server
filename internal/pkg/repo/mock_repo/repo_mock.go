// Code generated by MockGen. DO NOT EDIT.
// Source: ./repo.go

// Package mock_repo is a generated GoMock package.
package mock_repo

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/retail-ai-test/internal/pkg/model"
)

// MockIRecipeRepo is a mock of IRecipeRepo interface.
type MockIRecipeRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIRecipeRepoMockRecorder
}

// MockIRecipeRepoMockRecorder is the mock recorder for MockIRecipeRepo.
type MockIRecipeRepoMockRecorder struct {
	mock *MockIRecipeRepo
}

// NewMockIRecipeRepo creates a new mock instance.
func NewMockIRecipeRepo(ctrl *gomock.Controller) *MockIRecipeRepo {
	mock := &MockIRecipeRepo{ctrl: ctrl}
	mock.recorder = &MockIRecipeRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRecipeRepo) EXPECT() *MockIRecipeRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIRecipeRepo) Create(ctx context.Context, Recipe model.Recipe) (*model.Recipe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, Recipe)
	ret0, _ := ret[0].(*model.Recipe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockIRecipeRepoMockRecorder) Create(ctx, Recipe interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIRecipeRepo)(nil).Create), ctx, Recipe)
}

// DeleteByID mocks base method.
func (m *MockIRecipeRepo) DeleteByID(ctx context.Context, ID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByID", ctx, ID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByID indicates an expected call of DeleteByID.
func (mr *MockIRecipeRepoMockRecorder) DeleteByID(ctx, ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByID", reflect.TypeOf((*MockIRecipeRepo)(nil).DeleteByID), ctx, ID)
}

// FindAll mocks base method.
func (m *MockIRecipeRepo) FindAll(ctx context.Context) ([]*model.Recipe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", ctx)
	ret0, _ := ret[0].([]*model.Recipe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockIRecipeRepoMockRecorder) FindAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockIRecipeRepo)(nil).FindAll), ctx)
}

// FindByID mocks base method.
func (m *MockIRecipeRepo) FindByID(ctx context.Context, ID uint) (*model.Recipe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ctx, ID)
	ret0, _ := ret[0].(*model.Recipe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockIRecipeRepoMockRecorder) FindByID(ctx, ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockIRecipeRepo)(nil).FindByID), ctx, ID)
}

// UpdateByID mocks base method.
func (m *MockIRecipeRepo) UpdateByID(ctx context.Context, recipe model.Recipe) (*model.Recipe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateByID", ctx, recipe)
	ret0, _ := ret[0].(*model.Recipe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateByID indicates an expected call of UpdateByID.
func (mr *MockIRecipeRepoMockRecorder) UpdateByID(ctx, recipe interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateByID", reflect.TypeOf((*MockIRecipeRepo)(nil).UpdateByID), ctx, recipe)
}

// MockIUserRepo is a mock of IUserRepo interface.
type MockIUserRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIUserRepoMockRecorder
}

// MockIUserRepoMockRecorder is the mock recorder for MockIUserRepo.
type MockIUserRepoMockRecorder struct {
	mock *MockIUserRepo
}

// NewMockIUserRepo creates a new mock instance.
func NewMockIUserRepo(ctrl *gomock.Controller) *MockIUserRepo {
	mock := &MockIUserRepo{ctrl: ctrl}
	mock.recorder = &MockIUserRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUserRepo) EXPECT() *MockIUserRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIUserRepo) Create(ctx context.Context, user model.User) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, user)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockIUserRepoMockRecorder) Create(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIUserRepo)(nil).Create), ctx, user)
}

// DeleteByID mocks base method.
func (m *MockIUserRepo) DeleteByID(ctx context.Context, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByID", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByID indicates an expected call of DeleteByID.
func (mr *MockIUserRepoMockRecorder) DeleteByID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByID", reflect.TypeOf((*MockIUserRepo)(nil).DeleteByID), ctx, userID)
}

// FindByID mocks base method.
func (m *MockIUserRepo) FindByID(ctx context.Context, userID string) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ctx, userID)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockIUserRepoMockRecorder) FindByID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockIUserRepo)(nil).FindByID), ctx, userID)
}

// UpdateByID mocks base method.
func (m *MockIUserRepo) UpdateByID(ctx context.Context, user model.User) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateByID", ctx, user)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateByID indicates an expected call of UpdateByID.
func (mr *MockIUserRepoMockRecorder) UpdateByID(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateByID", reflect.TypeOf((*MockIUserRepo)(nil).UpdateByID), ctx, user)
}

// Validate mocks base method.
func (m *MockIUserRepo) Validate(ctx context.Context, userID, password string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", ctx, userID, password)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Validate indicates an expected call of Validate.
func (mr *MockIUserRepoMockRecorder) Validate(ctx, userID, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockIUserRepo)(nil).Validate), ctx, userID, password)
}
